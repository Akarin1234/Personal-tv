import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense, LSTM
import yfinance as yf
import alpaca_trade_api as tradeapi
from datetime import datetime, timedelta

# Get the stock price data from Yahoo Finance
symbol = 'AAPL'  # Replace with your desired stock symbol
interval = '1m'  # Specify the time interval (e.g., 1m for 1 minute data)
end = datetime.now()
start = end - timedelta(days=365)  # Adjust the duration of historical data as needed
df = yf.download(symbol, start=start, end=end, interval=interval)
data = df['Close'].values.reshape(-1,1)

# Scale the data
scaler = MinMaxScaler()
data = scaler.fit_transform(data)

# Split the data into training and testing sets
train_size = int(len(data) * 0.8)
train_data, test_data = data[0:train_size,:], data[train_size:len(data),:]

# Convert the data into features and labels
def create_dataset(data, look_back=1):
    X, Y = [], []
    for i in range(len(data)-look_back-1):
        X.append(data[i:(i+look_back), 0])
        Y.append(data[i+look_back, 0])
    return np.array(X), np.array(Y)

look_back = 60
train_X, train_Y = create_dataset(train_data, look_back)
test_X, test_Y = create_dataset(test_data, look_back)

# Reshape the data for LSTM input
train_X = np.reshape(train_X, (train_X.shape[0], train_X.shape[1], 1))
test_X = np.reshape(test_X, (test_X.shape[0], test_X.shape[1], 1))

# Build the LSTM model
model = Sequential()
model.add(LSTM(50, input_shape=(look_back, 1)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

# Train the model
model.fit(train_X, train_Y, epochs=100, batch_size=64)

# Make predictions on the testing set
predictions = model.predict(test_X)
predictions = scaler.inverse_transform(predictions)

# Evaluate the model
rmse = np.sqrt(mean_squared_error(test_Y, predictions))
print("RMSE:", rmse)

# Connect to Alpaca
api = tradeapi.REST('YOUR_API_KEY_ID', 'YOUR_SECRET_ACCESS_KEY', api_version='v2')
v2')

# Get account information
account = api.get_account()
print('Account:', account)

# Get the last closing price of the stock
symbol = 'AAPL'
barset = api.get_barset(symbol, 'day', limit=1)
last_price = barset[symbol][-1].c
print('Last price:', last_price)

# Get the predicted price of the stock
inputs = data[-look_back:].reshape(1, look_back, 1)
predicted_price = model.predict(inputs)
predicted_price = scaler.inverse_transform(predicted_price)[0][0]
print('Predicted price:', predicted_price)

# Place a market order to buy or sell the stock based on the predicted price
if predicted_price > last_price:
    api.submit_order(
        symbol=symbol,
        qty=100,
        side='buy',
        type='market',
        time_in_force='gtc'
    )
    print('Buy order submitted')
else:
    api.submit_order(
        symbol=symbol,
        qty=100,
        side='sell',
        type='market',
        time_in_force='gtc'
    )
    print('Sell order submitted')